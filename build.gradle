/**
 * Run tests:
 * - gradle clean test: Runs only unit tests
 * - gradle clean integrationTest: Runs only integration tests
 * - gradle clean test integrationTest: Runs unit and integration tests
 * - gradle clean build -x integrationTest: Builds application without integration tests
 * - gradle clean build -x test: Builds application without unit tests
 * - gradle clean build: Builds application and runs unit and integration tests
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.5'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
    }
}

allprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.unbroken-dome.test-sets'

    group = 'org.swissbib.linked'
    version = '2.0-alpha1'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
        testCompile 'org.mockito:mockito-junit-jupiter:2.18.3'
        testCompile 'org.mockito:mockito-core:2.18.3'
        // testCompile 'com.pholser:junit-quickcheck-core:0.8'
        testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
    }

    test {
        useJUnitPlatform()

        testLogging {
            events 'passed', 'skipped', 'failed'
        }

        reports {
            html.enabled = true
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven'

    dependencies {
        compile 'org.apache.logging.log4j:log4j-to-slf4j:2.8.2'
        compileOnly 'org.slf4j:slf4j-api:1.7.25'
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    ext.mfVersion = '5.0.0'
}

description = 'Plugins extending Metafacture core functionalities'
