buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "2.0.4"
    id "java"
    id "maven"
    id "scala"
}

ext {
    mfVersion = "5.0.0"
    scalaVersion = "2.12"
}

repositories {
    mavenCentral()
}

group = 'ch.linked-swissbib'
version = '1.1'

description = """swissbib-metafacture-plugins"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations.all {
}

dependencies {
    compile "org.elasticsearch.client:transport:5.4.1"
    compile "com.google.guava:guava:22.0"
    compile "org.neo4j:neo4j:3.2.1"
    compile "org.apache.solr:solr-solrj:6.6.0"
    compile "org.apache.kafka:kafka-clients:0.10.2.1"
    compile "org.apache.logging.log4j:log4j-to-slf4j:2.8.2"
    testCompile "junit:junit:4.12"
    testCompile "org.scala-lang:scala-library:2.12.6"
    testCompile "org.scalacheck:scalacheck_${scalaVersion}:1.14.0"
    testCompile "org.scalatest:scalatest_${scalaVersion}:3.0.5"
    testRuntime "org.scala-lang.modules:scala-xml_${scalaVersion}:1.10.0"
    compileOnly "org.metafacture:metafacture-framework:${mfVersion}"
    compileOnly "org.metafacture:metafacture-io:${mfVersion}"
    compileOnly "org.metafacture:metafacture-flowcontrol:${mfVersion}"
    compileOnly "org.metafacture:metafacture-javaintegration:${mfVersion}"
    compileOnly "org.metafacture:metafacture-commons:${mfVersion}"
    compileOnly "org.metafacture:metamorph:${mfVersion}"
    compileOnly "org.slf4j:slf4j-api:1.7.25"

}


shadowJar {
    dependencies {
        exclude(dependency('org.metafacture::'))
        exclude(dependency('org.slf4j:slf4j-api:1.7.21'))
    }
}